1.인터페이스
    1) 인터페이스를 이용한 클래스 동작
        - 100%  다형성이 보장됨
        - 구현메서드는 올수 없음
            -추상메서드와 final static 상수만 올수 있음
        - 서로 다른 클래스의 공통부분을 묶을 때 사용
        - 부모의 역할로 사용함(Upcasting)

    2) 다중상속을 대처하는 인터페이스 

2. 추상클래스와 인터페이스
    1) 공통점
        - 다형성 보장하기 위해서 등장된 개념
        - 추상 메서드를 가질 수 있는 있음
        - 단독으로 객체를 생성할 수 없음 
        - 부모의 역할로 사용함(Upcasting)

    2) 차이점
        - 서로 비슷한 클래스의 공통부분을 묶을 때 사용 ==> 추상클래스(: 추상메서드 + 구현메서드)
        - 서로 다른 클래스의 공통부분을 묶을 때 사용 ==> 인터페이스(: 추상메서드 + final static 변수)

3. 정리 및 Quiz1
    1) 서로 비슷한 클래스의 공통부분을 묶을 때 사용하는 클래스를 무엇이라고 하는가?
        - 추상클래스
    2) 서로 다른 클래스의 공통부분을 묶을 때 사용하는 클래스를 무엇이라고 하는가?
        - 인터페이스

    3) 인터페이스가 가질 수 있는 멤버 2가지는 무엇인가?
        - 추상메서드, final static 상수

    4) 다형성을 보장하기 위해서 등장된 클래스 2가지는 무엇인가요?
        -추상 클래스, 인터페이스 

    5) Dog 클래스는 Animal 클래스를 상속받고 Pet 인터페이스를 구현한 자바 코드를 작성하시오. 
    publc class Dog extends Animal implements Pet{ }

4. 자바 최상위 클래스 Object 
    1) 어떤 클래스 한 개를 만들면 기본적으로 생략된 코드는 무엇인가요? (3군데)
        
        1) import java.lang.*;
        publc class A  2) extends Object{
           3)public A() {
                super();
            }
        }    


    2) A 클래스를 사용하기 위해서 객체 생성하기 

        A a = new A();
        Object obj = new A;      // Upcasting

    3) Object 클래스를 이용하여 다형성을 적용
        - 다형성 인수로 object  활용하기            //리뷰03ObjectPolypParaTest 참고
        - 다형성 배열로 object[] 활용하기           

    4) Object 클래스의 toString() 메서드
        - 객체의 번지를 문자열로 출력
        - 재정의 해서 사용

5. 자바 API 활용 API 만들기
    1) API 
        - Java에서 제공해주는 class들
        - 직접 만들어서 사용하는 class들
        - 다운 (jar) 받아서 사용하는 class들

    2) 직접 만들어서 사용하는 class들
        -예) 배열에 저장된 수 중에서 최대값, 최소값을 구하는 클래스를 만드시오. 
            - 배열에서 첫 번째 값을 최소값으로 설정하고
              배열을 순회하면서 최소값보다 작은 값을 찾으면 최소값으로 업데이트함

    3) Java에서 제공해주는 class들
        -예) Random 클래스를 이용한 6개의 난수 생성하여 중복되지 않게 배열에 저장하시오. 
            -난수(Random Number) : 예측이 불가능한 무작위 수
            - Random 클래스 
                - 임의의 랜덤 값 만들어 낼때 사용
                - public boolnean nextBoolean()          //boolnean형 난수 반환
                - public int nextInt()                   //int형 난수 반환
                - public int nextInt(int bound)          // 0 이상 bound 미만 범위의 int형 난수 반환


            - rand.nextInt(45) ==> 0 이상 45 미만의 난수만 반환
              rand.nextInt(45) +1 ==> 1부터 45 사이의 난수를 반환

              


